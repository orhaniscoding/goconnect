openapi: 3.0.3
info:
  title: GoConnect API
  version: 0.1.0
  description: "GoConnect server API for virtual network management"
  contact:
    name: orhaniscoding
    url: https://github.com/orhaniscoding/goconnect
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.goconnect.example
    description: Production server
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: "ERR_INVALID_REQUEST"
        message:
          type: string
          example: "Invalid request data"
        details:
          type: object
          additionalProperties: true
        retry_after:
          type: integer
          minimum: 0

    Network:
      type: object
      required:
        [
          id,
          tenant_id,
          name,
          visibility,
          join_policy,
          cidr,
          created_by,
          created_at,
          updated_at,
        ]
      properties:
        id:
          type: string
          example: "net_1234567890_123456"
          description: "Unique network identifier"
        tenant_id:
          type: string
          example: "default"
          description: "Tenant identifier"
        name:
          type: string
          minLength: 3
          maxLength: 64
          example: "My Private Network"
          description: "Human-readable network name"
        visibility:
          type: string
          enum: [public, private]
          example: "public"
          description: "Network visibility level"
        join_policy:
          type: string
          enum: [open, invite, approval]
          example: "open"
          description: "How users can join the network"
        cidr:
          type: string
          pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'
          example: "10.0.0.0/24"
          description: "Network CIDR range"
        dns:
          type: string
          nullable: true
          example: "1.1.1.1"
          description: "Custom DNS server"
        mtu:
          type: integer
          nullable: true
          minimum: 576
          maximum: 1500
          example: 1420
          description: "Maximum transmission unit"
        split_tunnel:
          type: boolean
          nullable: true
          example: false
          description: "Enable split tunneling"
        created_by:
          type: string
          example: "user_123"
          description: "User who created the network"
        created_at:
          type: string
          format: date-time
          example: "2025-09-23T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-23T10:00:00Z"
        soft_deleted_at:
          type: string
          format: date-time
          nullable: true
          description: "Soft deletion timestamp"
        moderation_redacted:
          type: boolean
          example: false
          description: "Whether content is moderation redacted"

    CreateNetworkRequest:
      type: object
      required: [name, visibility, join_policy, cidr]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 64
          example: "My Private Network"
        visibility:
          type: string
          enum: [public, private]
          example: "public"
        join_policy:
          type: string
          enum: [open, invite, approval]
          example: "open"
        cidr:
          type: string
          pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'
          example: "10.0.0.0/24"
        dns:
          type: string
          nullable: true
          example: "1.1.1.1"
        mtu:
          type: integer
          nullable: true
          minimum: 576
          maximum: 1500
          example: 1420
        split_tunnel:
          type: boolean
          nullable: true
          example: false

    NetworkListResponse:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Network"
        pagination:
          type: object
          properties:
            limit:
              type: integer
              example: 20
            next_cursor:
              type: string
              nullable: true
              example: "net_1234567890_123456"

    NetworkResponse:
      type: object
      required: [data]
      properties:
        data:
          $ref: "#/components/schemas/Network"

    NetworkUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 64
        visibility:
          type: string
          enum: [public, private]
        join_policy:
          type: string
          enum: [open, invite, approval]
      additionalProperties: false

    Membership:
      type: object
      required: [id, network_id, user_id, role, status, created_at, updated_at]
      properties:
        id:
          type: string
        network_id:
          type: string
        user_id:
          type: string
        role:
          type: string
          enum: [member, admin, owner]
        status:
          type: string
          enum: [pending, approved, banned]
        joined_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    JoinRequest:
      type: object
      required: [id, network_id, user_id, status, created_at]
      properties:
        id:
          type: string
        network_id:
          type: string
        user_id:
          type: string
        status:
          type: string
          enum: [pending, approved, denied]
        created_at:
          type: string
          format: date-time
        decided_at:
          type: string
          format: date-time
          nullable: true

    MembersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Membership"
        pagination:
          type: object
          properties:
            limit:
              type: integer
            next_cursor:
              type: string
              nullable: true

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      description: "Unique key for idempotent operations (24h TTL)"
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440000"

paths:
  /v1/networks:
    get:
      summary: List networks
      description: "Retrieve networks based on visibility and filtering options"
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: visibility
          in: query
          description: "Filter by network visibility"
          schema:
            type: string
            enum: [public, mine, all]
            default: public
          example: "public"
        - name: limit
          in: query
          description: "Maximum number of networks to return"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: cursor
          in: query
          description: "Pagination cursor"
          schema:
            type: string
          example: "net_1234567890_123456"
        - name: search
          in: query
          description: "Search networks by name"
          schema:
            type: string
          example: "private"
      responses:
        "200":
          description: "Networks retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkListResponse"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Forbidden - insufficient privileges"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create network
      description: "Create a new virtual network with CIDR validation and overlap detection"
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNetworkRequest"
      responses:
        "201":
          description: "Network created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkResponse"
        "400":
          description: "Bad request - validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                invalid_cidr:
                  summary: Invalid CIDR format
                  value:
                    code: "ERR_CIDR_INVALID"
                    message: "Invalid CIDR format: invalid network address"
                    details:
                      field: "cidr"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: "Conflict - CIDR overlap or idempotency conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                cidr_overlap:
                  summary: CIDR overlap with existing network
                  value:
                    code: "ERR_CIDR_OVERLAP"
                    message: "CIDR range overlaps with existing network"
                    details:
                      cidr: "10.0.0.0/24"
                idempotency_conflict:
                  summary: Idempotency key reused with different body
                  value:
                    code: "ERR_IDEMPOTENCY_CONFLICT"
                    message: "Idempotency key already used with different request body"
                    details:
                      key: "550e8400-e29b-41d4-a716-446655440000"
        "429":
          description: "Too Many Requests - Rate limit exceeded"
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/networks/{id}:
    get:
      summary: Get network by ID
      description: "Retrieve a specific network by its ID"
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "Network ID"
          schema:
            type: string
          example: "net_1234567890_123456"
      responses:
        "200":
          description: "Network retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkResponse"
        "404":
          description: "Network not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update network
      description: "Update mutable network fields (name, visibility, join_policy)"
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkUpdateRequest"
      responses:
        "200":
          {
            description: "Updated",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/NetworkResponse" } },
              },
          }
        "400":
          {
            description: "Invalid request",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "401":
          {
            description: "Unauthorized",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "404":
          {
            description: "Not found",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
    delete:
      summary: Delete (soft) network
      description: "Soft delete network (idempotent)"
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      responses:
        "200":
          {
            description: "Deleted",
            content:
              {
                application/json:
                  {
                    schema:
                      { type: object, properties: { ok: { type: boolean } } },
                  },
              },
          }
        "401":
          {
            description: "Unauthorized",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "404":
          {
            description: "Not found",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }

  /v1/networks/{id}/join:
    post:
      summary: Join a network
      description: "Join flow based on network join_policy"
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      responses:
        "200":
          description: "Joined as member"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Membership"
        "202":
          description: "Join request created (approval policy)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/JoinRequest"
        "404":
          description: "Private network (hidden)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: "Too Many Requests - Rate limit exceeded"
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/networks/{id}/approve:
    post:
      summary: Approve a pending join request
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: "Approved membership"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Membership"
        "400":
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Forbidden - only admin/owner can approve"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: "Too Many Requests - Rate limit exceeded"
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/networks/{id}/deny:
    post:
      summary: Deny a pending join request
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: "Denied"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        "400":
          {
            description: "Invalid request",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "401":
          {
            description: "Unauthorized",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "403":
          {
            description: "Forbidden - only admin/owner can deny",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "429":
          description: "Too Many Requests - Rate limit exceeded"
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/networks/{id}/kick:
    post:
      summary: Kick an approved member
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: "Kicked"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        "400":
          {
            description: "Invalid request",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "401":
          {
            description: "Unauthorized",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "403":
          {
            description: "Forbidden - only admin/owner can kick",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "429":
          description: "Too Many Requests - Rate limit exceeded"
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/networks/{id}/ban:
    post:
      summary: Ban a user from the network
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: "Banned"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        "400":
          {
            description: "Invalid request",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "401":
          {
            description: "Unauthorized",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "403":
          {
            description: "Forbidden - only admin/owner can ban",
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Error" } },
              },
          }
        "429":
          description: "Too Many Requests - Rate limit exceeded"
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/networks/{id}/members:
    get:
      summary: List members
      tags: [Networks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, banned]
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - name: cursor
          in: query
          schema: { type: string }
      responses:
        "200":
          description: "Members listed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MembersListResponse"

tags:
  - name: Networks
    description: "Virtual network management operations"
